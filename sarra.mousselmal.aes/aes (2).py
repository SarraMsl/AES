# -*- coding: utf-8 -*-
"""AES.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hmH9PuQ597SHtaI1OslppUtus-TFyl1Z
"""

!pip install pycryptodome

from Crypto.Cipher import AES
import base64
import secrets

# Set the encryption key and initialization vector
# Generate a random AES-128 key
encryption_key =  secrets.token_bytes(16)
iv = b'This is an IV456'

# Pad the plaintext to a multiple of 16 bytes
def pad(plaintext):
    return plaintext + b"\0" * (AES.block_size - len(plaintext) % AES.block_size)

# Encrypt the plaintext using AES-128 in CBC mode
def encrypt(plaintext):
    cipher = AES.new(encryption_key, AES.MODE_CBC, iv)
    ciphertext = cipher.encrypt(pad(plaintext))
    return base64.b64encode(ciphertext)

# Decrypt the ciphertext using AES-128 in CBC mode
def decrypt(ciphertext):
    cipher = AES.new(encryption_key, AES.MODE_CBC, iv)
    plaintext = cipher.decrypt(base64.b64decode(ciphertext))
    return plaintext.rstrip(b"\0")

# Example usage
plaintext = b'This is a test message'
ciphertext = encrypt(plaintext)
decrypted_plaintext = decrypt(ciphertext)
print("Plaintext: ", plaintext)
print("Ciphertext: ", ciphertext)
print("Decrypted plaintext: ", decrypted_plaintext)